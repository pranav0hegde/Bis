import random
# Objective function: f(x) = x^2
def fitness_function(x):
    return x**2

# Particle class to represent each particle in the swarm
class Particle:
    def __init__(self, min_x, max_x):
        self.position = random.uniform(min_x, max_x)  # Current position
        self.velocity = random.uniform(-1, 1)          # Current velocity
        self.best_position = self.position               # Best position found by the particle
        self.best_fitness = fitness_function(self.position)  # Best fitness value

    def update_velocity(self, global_best_position, inertia_weight, cognitive_coefficient, social_coefficient):
        r1, r2 = random.random(), random.random()
        cognitive_velocity = cognitive_coefficient * r1 * (self.best_position - self.position)
        social_velocity = social_coefficient * r2 * (global_best_position - self.position)
        self.velocity = (inertia_weight * self.velocity) + cognitive_velocity + social_velocity

    def update_position(self, min_x, max_x):
        self.position += self.velocity
        # Ensure the position is within bounds
        self.position = max(min_x, min(self.position, max_x))
        # Update the best position and fitness if needed
        fitness = fitness_function(self.position)
        if fitness < self.best_fitness:  # We want to minimize
            self.best_fitness = fitness
            self.best_position = self.position

# PSO algorithm
def particle_swarm_optimization(pop_size, min_x, max_x, generations, inertia_weight, cognitive_coefficient, social_coefficient):
    # Initialize particles
    swarm = [Particle(min_x, max_x) for _ in range(pop_size)]

    # Global best position initialized to None
    global_best_position = swarm[0].best_position
    global_best_fitness = swarm[0].best_fitness

    for generation in range(generations):
        for particle in swarm:
            # Update global best position
            if particle.best_fitness < global_best_fitness:
                global_best_fitness = particle.best_fitness
                global_best_position = particle.best_position

            # Update particle velocity and position
            particle.update_velocity(global_best_position, inertia_weight, cognitive_coefficient, social_coefficient)
            particle.update_position(min_x, max_x)

        # Print the best fitness in the current generation
        print(f"Generation {generation + 1}: Best solution = {global_best_position}, Fitness = {global_best_fitness}")

    return global_best_position

# Parameters
population_size = 30
min_value = -10
max_value = 10
num_generations = 50
inertia_weight = 0.5
cognitive_coefficient = 1.5
social_coefficient = 1.5

# Run Particle Swarm Optimization
best_solution = particle_swarm_optimization(population_size, min_value, max_value, num_generations, inertia_weight, cognitive_coefficient, social_coefficient)
print(f"Best solution found: {best_solution}, Fitness: {fitness_function(best_solution)}")
